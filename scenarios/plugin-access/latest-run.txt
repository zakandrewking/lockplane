=== Scenario: plugin-access ===
Description: Install Lockplane plugin and verify Claude can access it and use the skills
Started at: 2025-10-29 07:34:32

--- Scenario Execution ---
=== Plugin Access Scenario ===

This tests that Claude can access and use an installed plugin.

üìÅ Isolated Claude config: /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude
üì¶ Lockplane repo: /Users/zak/repos/lockplane

üîß Initializing git repository...
$ git init
$ git config user.name Test User
$ git config user.email test@example.com
$ git add .
$ git commit -m Initial commit

üì¶ Installing Lockplane plugin in isolated environment...
Manually copying plugin files and registering...

Copying /Users/zak/repos/lockplane to /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude/plugins/marketplaces/lockplane-tools...
‚úì Created /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude/plugins/known_marketplaces.json
‚úì Created /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude/plugins/installed_plugins.json

‚úì Plugin installed successfully
  Marketplace: lockplane-tools
  Location: /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude/plugins/marketplaces/lockplane-tools

ü§ñ Testing plugin access with Claude...
Asking a Lockplane-specific question...

Prompt:
------------------------------------------------------------
I have a users table and I want to add a new email column.
The table already has data in it.

How should I do this safely with Lockplane?
------------------------------------------------------------

Running Claude with HOME=/Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home

$ claude --print I have a users table and I want to add a new email column.
The table already has data in it.

How should I do this safely with Lockplane?

‚úÖ Claude executed successfully

======================================================================
FULL CLAUDE OUTPUT:
======================================================================
I see we're in a restricted directory. Let me provide you with the safe workflow for adding an email column to your users table using Lockplane:

## Safe Workflow for Adding an Email Column

Here's how to safely add an email column to a table with existing data using Lockplane:

### Step 1: Update Your Schema File

First, modify your JSON schema file to add the new email column to the users table:

```json
{
  "$schema": "https://raw.githubusercontent.com/zakandrewking/lockplane/main/schema-json/schema.json",
  "tables": [
    {
      "name": "users",
      "columns": [
        {
          "name": "id",
          "type": "SERIAL",
          "constraints": ["PRIMARY KEY"]
        },
        {
          "name": "email",
          "type": "VARCHAR(255)",
          "constraints": ["NOT NULL"],
          "default": "'placeholder@example.com'"  // Safe default for existing rows
        }
        // ... other existing columns
      ]
    }
  ]
}
```

**Important considerations for the email column:**
- **Use a DEFAULT value** - Since the table has existing data, you should either:
  - Make it `NULL`able: `"constraints": []` (no NOT NULL)
  - Or provide a DEFAULT: `"default": "'placeholder@example.com'"`
- **Add a unique constraint later** - Don't add UNIQUE initially if you're using a default value

### Step 2: Generate Migration Plan

Generate the migration plan to see what Lockplane will do:

```bash
lockplane plan \
  --current-schema current_schema.json \
  --desired-schema desired_schema.json \
  --output migration_plan.json
```

This will show you:
- The exact `ALTER TABLE` statement
- Risk assessment (LOW/MEDIUM/HIGH)
- Whether the operation is reversible
- Automatic rollback plan generation

### Step 3: Review the Plan

Check the generated `migration_plan.json`:

```json
{
  "steps": [
    {
      "type": "alter_table",
      "table": "users",
      "operation": "add_column",
      "column": "email",
      "sql": "ALTER TABLE users ADD COLUMN email VARCHAR(255) NOT NULL DEFAULT 'placeholder@example.com';",
      "description": "Add email column to users table",
      "reversible": true,
      "risk": "LOW"
    }
  ]
}
```

### Step 4: Test in Shadow Database

Lockplane automatically validates migrations in a shadow database:

```bash
lockplane validate \
  --plan migration_plan.json \
  --database-url "$DATABASE_URL" \
  --shadow-database-url "$SHADOW_DATABASE_URL"
```

This will:
1. Create a copy of your schema in the shadow DB
2. Execute the migration
3. Verify it succeeds without errors
4. Test the rollback works
5. Clean up the shadow DB

### Step 5: Apply to Production

Once validated, apply to production:

```bash
lockplane apply \
  --plan migration_plan.json \
  --database-url "$DATABASE_URL"
```

### Step 6: Update Email Values (if using placeholder)

If you used a placeholder default, update the real values:

```sql
-- Update emails for existing users
UPDATE users SET email = actual_email_value WHERE id = user_id;

-- After all emails are set, you can optionally remove the default:
ALTER TABLE users ALTER COLUMN email DROP DEFAULT;
```

## Best Practices for Adding Columns to Tables with Data

1. **Always provide a DEFAULT or make it NULLable** - Required for existing rows
2. **Test in shadow DB first** - Lockplane does this automatically
3. **Have a rollback plan** - Lockplane generates this automatically
4. **Apply during low-traffic periods** - Minimize impact
5. **Monitor the operation** - Watch for locks or performance issues
6. **Add indexes after** - Add indexes in a separate migration to avoid long locks

## Alternative: Make it NULLable First

A safer approach for production systems:

```json
{
  "name": "email",
  "type": "VARCHAR(255)",
  "constraints": []  // No NOT NULL initially
}
```

Then in a follow-up migration after populating values:
```json
{
  "name": "email",
  "type": "VARCHAR(255)",
  "constraints": ["NOT NULL"]
}
```

This is safer because:
- No placeholder data needed
- Existing rows work immediately
- You can populate real values before adding the constraint
- Less risk of data integrity issues

Would you like me to help you create the actual schema files for this migration?

======================================================================

üìã Scenario execution complete
Isolated config: /Users/zak/repos/lockplane/scenarios/plugin-access/build/isolated_home/.claude
Validation will check if Claude used the Lockplane skill



--- Validation ---
=== Validating Plugin Access ===

‚úì Plugin installation attempted
‚úì Plugins directory created
‚úì Marketplace directory exists
‚úì Plugin directory exists
‚úì Skill file found
‚úì Skill file has content
‚úì installed_plugins.json exists
‚úì Lockplane registered in installed_plugins.json
‚úì known_marketplaces.json exists
‚úì lockplane-tools in marketplaces
‚úì Claude output exists
‚úì Response mentions Lockplane
‚úì Response includes Lockplane commands/concepts
‚úì Response includes safety guidance
‚úì Response is detailed

============================================================
Test Results
============================================================
‚úÖ PASS - Plugin is working!

The Lockplane plugin:
  ‚úì Was successfully installed
  ‚úì Is accessible to Claude
  ‚úì Provides Lockplane expertise
  ‚úì Improves response quality


Status: PASSED
Duration: 44.1s